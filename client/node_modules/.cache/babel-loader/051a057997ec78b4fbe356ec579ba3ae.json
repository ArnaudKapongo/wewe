{"ast":null,"code":"var _jsxFileName = \"/Users/akapongo/Desktop/wewe/client/src/context/createDataContext.js\";\nimport React, { createContext, useReducer } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default ((reducer, actions, initialState) => {\n  var _s = $RefreshSig$();\n\n  const Context = /*#__PURE__*/createContext();\n\n  const Provider = _ref => {\n    _s();\n\n    let {\n      children\n    } = _ref;\n    const [state, dispatch] = useReducer(reducer, initialState);\n    const boundActions = {};\n\n    for (let key in actions) {\n      boundActions[key] = actions[key](dispatch);\n    }\n\n    return /*#__PURE__*/_jsxDEV(Context.Provider, {\n      value: {\n        state,\n        ...boundActions\n      },\n      children: children\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 17,\n      columnNumber: 13\n    }, this);\n  };\n\n  _s(Provider, \"wVzs03LCUcYtKoVkfIy0rOpkY6I=\");\n\n  return {\n    Context,\n    Provider\n  };\n});","map":{"version":3,"sources":["/Users/akapongo/Desktop/wewe/client/src/context/createDataContext.js"],"names":["React","createContext","useReducer","reducer","actions","initialState","Context","Provider","children","state","dispatch","boundActions","key"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,aAAhB,EAA+BC,UAA/B,QAAiD,OAAjD;;AAGA,gBAAe,CAACC,OAAD,EAAUC,OAAV,EAAmBC,YAAnB,KAAqC;AAAA;;AAChD,QAAMC,OAAO,gBAAGL,aAAa,EAA7B;;AAGA,QAAMM,QAAQ,GAAG,QAAkB;AAAA;;AAAA,QAAjB;AAAEC,MAAAA;AAAF,KAAiB;AAC/B,UAAM,CAACC,KAAD,EAAQC,QAAR,IAAqBR,UAAU,CAACC,OAAD,EAAUE,YAAV,CAArC;AAEA,UAAMM,YAAY,GAAG,EAArB;;AACA,SAAI,IAAIC,GAAR,IAAeR,OAAf,EAAwB;AACpBO,MAAAA,YAAY,CAACC,GAAD,CAAZ,GAAoBR,OAAO,CAACQ,GAAD,CAAP,CAAaF,QAAb,CAApB;AACH;;AAED,wBACI,QAAC,OAAD,CAAS,QAAT;AAAkB,MAAA,KAAK,EAAE;AAAED,QAAAA,KAAF;AAAS,WAAGE;AAAZ,OAAzB;AAAA,gBACKH;AADL;AAAA;AAAA;AAAA;AAAA,YADJ;AAKH,GAbD;;AAJgD,KAI1CD,QAJ0C;;AAkBhD,SAAO;AAAED,IAAAA,OAAF;AAAWC,IAAAA;AAAX,GAAP;AAEH,CApBD","sourcesContent":["import React, { createContext, useReducer } from 'react';\n\n\nexport default (reducer, actions, initialState) =>  {\n    const Context = createContext();\n\n\n    const Provider = ({ children }) => {\n        const [state, dispatch ] = useReducer(reducer, initialState);\n\n        const boundActions = {};\n        for(let key in actions) {\n            boundActions[key] = actions[key](dispatch);\n        }\n\n        return(\n            <Context.Provider value={{ state, ...boundActions }}>\n                {children}\n            </Context.Provider>\n        );\n    };\n    return { Context, Provider };\n\n};"]},"metadata":{},"sourceType":"module"}